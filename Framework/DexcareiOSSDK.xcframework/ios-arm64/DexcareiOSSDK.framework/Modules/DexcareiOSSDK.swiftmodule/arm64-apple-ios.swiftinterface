// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DexcareiOSSDK
import AVFoundation
import AVKit
import SystemConfiguration.CaptiveNetwork
import CoreGraphics
import CoreLocation
import Foundation
import InputBarAccessoryView
import MBProgressHUD
import MessageKit
import NetworkExtension
import OpenTok
import PromiseKit
import Swift
import SystemConfiguration
import UIKit.UIGestureRecognizerSubclass
import UIKit
import UserNotifications
public struct RetailVisitInformation {
  public let visitReason: Swift.String
  public let patientDeclaration: DexcareiOSSDK.PatientDeclaration
  public let userEmail: Swift.String
  public let contactPhoneNumber: Swift.String
  public var actorRelationshipToPatient: DexcareiOSSDK.RelationshipToPatient?
  public var patientQuestions: [DexcareiOSSDK.PatientQuestion]?
  public init(visitReason: Swift.String, patientDeclaration: DexcareiOSSDK.PatientDeclaration, userEmail: Swift.String, contactPhoneNumber: Swift.String, actorRelationshipToPatient: DexcareiOSSDK.RelationshipToPatient?, patientQuestions: [DexcareiOSSDK.PatientQuestion]? = nil)
}
public enum RelationshipToPatient : Swift.String, Swift.Codable {
  case mother
  case father
  case grandparent
  case stepParent
  case fosterParent
  case legalGuardian
  case relative
  case nonRelative
  case brother
  case sister
  case daughter
  case son
  case friend
  case grandChild
  case spouse
  case significantOther
  case caseManager
  case domesticPartner
  case employer
  case patientRefused
  case powerOfAttorney
  case surrogateOrProxy
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public typealias ScheduleRetailAppointmentFailure = (DexcareiOSSDK.ScheduleRetailAppointmentFailedReason) -> Swift.Void
public protocol RetailService {
  func getClinics(brand: Swift.String, success: @escaping ([DexcareiOSSDK.Clinic]) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func getTimeSlots(departmentName: Swift.String, visitTypeShortName: DexcareiOSSDK.VisitTypeShortName?, success: @escaping (DexcareiOSSDK.ClinicTimeSlot) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func scheduleRetailAppointment(paymentMethod: DexcareiOSSDK.PaymentMethod, visitInformation: DexcareiOSSDK.RetailVisitInformation, timeslot: DexcareiOSSDK.TimeSlot, ehrSystemName: Swift.String, patientDexCarePatient: DexcareiOSSDK.DexcarePatient, actorDexCarePatient: DexcareiOSSDK.DexcarePatient?, success: @escaping (Swift.String) -> Swift.Void, failure: @escaping (DexcareiOSSDK.ScheduleRetailAppointmentFailedReason) -> Swift.Void)
}
@frozen public enum VirtualFeedback {
  case rating(question: Swift.String?, rating: Swift.Int)
  case feedback(question: Swift.String?, answer: Swift.String)
  case followUp(question: Swift.String?, answer: Swift.Bool)
  public var defaultQuestionString: Swift.String {
    get
  }
}
public enum ScheduleRetailAppointmentFailedReason : Swift.Error, DexcareiOSSDK.FailedReasonType {
  case patientNotLinked
  case patientNotFound
  case patientAccountLocked
  case conflictSlotUnavailable
  case conflictPatientDoubleBooked
  case unknownAppointmentConflict
  case internalServerError
  case missingInformation(message: Swift.String)
  case failed(reason: DexcareiOSSDK.FailedReason)
  public func failedReason() -> DexcareiOSSDK.FailedReason?
}
public struct WaitTime : Swift.Decodable, Swift.Equatable {
  public var generatedAt: Foundation.Date
  public var estimatedWaitTimeSeconds: Swift.Int
  public var estimatedWaitTimeMessage: Swift.String?
  public init(generatedAt: Foundation.Date, estimatedWaitTimeSeconds: Swift.Int, estimatedWaitTimeMessage: Swift.String?)
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.WaitTime, b: DexcareiOSSDK.WaitTime) -> Swift.Bool
}
public enum FailedReason : Swift.Error {
  case missingInformation(message: Swift.String)
  case badRequest
  case unauthorized
  case notFound
  case unknown(error: Swift.Error)
  case invalidInput(message: Swift.String)
}
extension FailedReason : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol FailedReasonType {
  func failedReason() -> DexcareiOSSDK.FailedReason?
}
public enum VisitStatus : Swift.String, Swift.Decodable {
  case requested
  case waitingroom
  case invisit
  case done
  case cancelled
  case staffdeclined
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct PatientDemographics : Swift.Codable, Swift.Equatable {
  public var name: DexcareiOSSDK.HumanName
  public var addresses: [DexcareiOSSDK.Address]
  public var birthdate: Foundation.Date
  public var email: Swift.String
  public var gender: DexcareiOSSDK.Gender
  public let identifiers: [DexcareiOSSDK.Identifier]
  public var ehrSystemName: Swift.String?
  public var last4SSN: Swift.String
  public var homePhone: Swift.String?
  public var mobilePhone: Swift.String?
  public var workPhone: Swift.String?
  public init(name: DexcareiOSSDK.HumanName, addresses: [DexcareiOSSDK.Address], birthdate: Foundation.Date, email: Swift.String, gender: DexcareiOSSDK.Gender, identifiers: [DexcareiOSSDK.Identifier], ehrSystemName: Swift.String?, last4SSN: Swift.String, homePhone: Swift.String?, mobilePhone: Swift.String?, workPhone: Swift.String?)
  public init(name: DexcareiOSSDK.HumanName, addresses: [DexcareiOSSDK.Address], birthDate: Foundation.Date, email: Swift.String, gender: DexcareiOSSDK.Gender, ehrSystemName: Swift.String?, last4SSN: Swift.String, homePhone: Swift.String?, mobilePhone: Swift.String?, workPhone: Swift.String?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DexcareiOSSDK.PatientDemographics, b: DexcareiOSSDK.PatientDemographics) -> Swift.Bool
}
public struct Address : Swift.Codable, Swift.Equatable {
  public var line1: Swift.String
  public var line2: Swift.String?
  public var city: Swift.String
  public var state: Swift.String
  public var postalCode: Swift.String
  public init(line1: Swift.String, line2: Swift.String?, city: Swift.String, state: Swift.String, postalCode: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DexcareiOSSDK.Address, b: DexcareiOSSDK.Address) -> Swift.Bool
}
public struct TytoCareConfig : Swift.Equatable {
  public let helpURL: Foundation.URL?
  public init(helpURL: Foundation.URL?)
  public static func == (a: DexcareiOSSDK.TytoCareConfig, b: DexcareiOSSDK.TytoCareConfig) -> Swift.Bool
}
public enum VirtualVisitFailedReason : Swift.Error, DexcareiOSSDK.FailedReasonType {
  case incompleteRequestData
  case missingInformation(message: Swift.String)
  case invalidEmail
  case expired
  case regionBusy
  case deprecated
  case permissionDenied(type: DexcareiOSSDK.VirtualVisitFailedReason.PermissionType)
  case failed(reason: DexcareiOSSDK.FailedReason)
  case virtualVisitNotFound
  public struct PermissionType : Swift.OptionSet {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let camera: DexcareiOSSDK.VirtualVisitFailedReason.PermissionType
    public static let microphone: DexcareiOSSDK.VirtualVisitFailedReason.PermissionType
    public static let notifications: DexcareiOSSDK.VirtualVisitFailedReason.PermissionType
    public typealias Element = DexcareiOSSDK.VirtualVisitFailedReason.PermissionType
    public typealias ArrayLiteralElement = DexcareiOSSDK.VirtualVisitFailedReason.PermissionType
    public typealias RawValue = Swift.UInt8
  }
  public func failedReason() -> DexcareiOSSDK.FailedReason?
}
@frozen public enum PaymentHolderDeclaration : Swift.String {
  case `self`
  case other
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension PaymentHolderDeclaration : Swift.Codable {
}
public struct VirtualVisitInformation {
  public var visitReason: Swift.String
  public var patientDeclaration: DexcareiOSSDK.PatientDeclaration
  public var acceptedTerms: Swift.Bool
  public var userEmail: Swift.String
  public var contactPhoneNumber: Swift.String
  public var preTriageTags: [Swift.String]?
  public var actorRelationshipToPatient: DexcareiOSSDK.RelationshipToPatient?
  public var practiceRegionId: Swift.String?
  public init(visitReason: Swift.String, patientDeclaration: DexcareiOSSDK.PatientDeclaration, acceptedTerms: Swift.Bool, userEmail: Swift.String, contactPhoneNumber: Swift.String, preTriageTags: [Swift.String]?, actorRelationshipToPatient: DexcareiOSSDK.RelationshipToPatient?, practiceRegionId: Swift.String?)
}
extension VirtualVisitInformation : Swift.Equatable {
  public static func == (a: DexcareiOSSDK.VirtualVisitInformation, b: DexcareiOSSDK.VirtualVisitInformation) -> Swift.Bool
}
public struct Provider : Swift.Codable {
  public let providerNationalId: Swift.String
  public let name: Swift.String
  public let credentials: Swift.String?
  public let minAge: Swift.Int?
  public let maxAge: Swift.Int?
  public let brand: Swift.String?
  public let isActive: Swift.Bool?
  public let departments: [DexcareiOSSDK.ProviderDepartment]
  public let visitTypes: [DexcareiOSSDK.ProviderVisitType]
  public init(providerNationalId: Swift.String, name: Swift.String, credentials: Swift.String?, minAge: Swift.Int?, maxAge: Swift.Int?, brand: Swift.String?, isActive: Swift.Bool?, departments: [DexcareiOSSDK.ProviderDepartment], visitTypes: [DexcareiOSSDK.ProviderVisitType])
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ProviderVisitType : Swift.Codable {
  public let visitTypeId: Swift.String
  public let name: Swift.String
  public let shortName: DexcareiOSSDK.VisitTypeShortName?
  public let description: Swift.String?
  public init(visitTypeId: Swift.String, name: Swift.String, shortName: DexcareiOSSDK.VisitTypeShortName?, description: Swift.String?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ProviderDepartment : Swift.Codable {
  public let departmentId: Swift.String
  public let ehrSystemName: Swift.String
  public let name: Swift.String
  public let center: Swift.String?
  public let phone: Swift.String?
  public let address: DexcareiOSSDK.Address?
  public init(departmentId: Swift.String, ehrSystemName: Swift.String, name: Swift.String, center: Swift.String?, phone: Swift.String?, address: DexcareiOSSDK.Address?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomizationOptions : Swift.Equatable {
  public var customStrings: DexcareiOSSDK.CustomStrings?
  public var tytoCareConfig: DexcareiOSSDK.TytoCareConfig?
  public var virtualConfig: DexcareiOSSDK.VirtualConfig?
  public var validateEmails: Swift.Bool
  public init(customStrings: DexcareiOSSDK.CustomStrings?, tytoCareConfig: DexcareiOSSDK.TytoCareConfig? = nil, virtualConfig: DexcareiOSSDK.VirtualConfig? = nil, validateEmails: Swift.Bool = true)
  public static func == (a: DexcareiOSSDK.CustomizationOptions, b: DexcareiOSSDK.CustomizationOptions) -> Swift.Bool
}
public struct CustomStrings : Swift.Equatable {
  public let waitingRoomTitle: Swift.String?
  public let waitingRoomCancelButtonTitle: Swift.String?
  public let cancelThisVisitActionTitle: Swift.String?
  public let abortAppointmentAlertTitle: Swift.String?
  public let permissionDeniedAlertTitle: Swift.String?
  public let cancelReconnectAlertMessage: Swift.String?
  public init(waitingRoomTitle: Swift.String? = nil, waitingRoomCancelButtonTitle: Swift.String? = nil, cancelThisVisitActionTitle: Swift.String? = nil, abortAppointmentAlertTitle: Swift.String? = nil, permissionDeniedAlertTitle: Swift.String? = nil, cancelReconnectAlertMessage: Swift.String? = nil)
  public static func == (a: DexcareiOSSDK.CustomStrings, b: DexcareiOSSDK.CustomStrings) -> Swift.Bool
}
public typealias VisitCompletion = (DexcareiOSSDK.VisitCompletionReason) -> Swift.Void
public protocol VirtualService {
  func resumeVirtualVisit(visitId: Swift.String, presentingViewController: UIKit.UIViewController, dexCarePatient: DexcareiOSSDK.DexcarePatient, onCompletion: @escaping DexcareiOSSDK.VisitCompletion, success: @escaping () -> Swift.Void, failure: @escaping (DexcareiOSSDK.VirtualVisitFailedReason) -> Swift.Void)
  func updatePushNotificationDeviceToken(token: Foundation.Data)
  func postFeedback(feedbacks: [DexcareiOSSDK.VirtualFeedback], success: @escaping () -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func cancelVirtualVisit(visitId: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (DexcareiOSSDK.VirtualVisitFailedReason) -> Swift.Void)
  func startVirtualVisit(presentingViewController: UIKit.UIViewController, paymentMethod: DexcareiOSSDK.PaymentMethod, virtualVisitInformation: DexcareiOSSDK.VirtualVisitInformation, catchmentArea: DexcareiOSSDK.CatchmentArea, patientDexCarePatient: DexcareiOSSDK.DexcarePatient, actorDexCarePatient: DexcareiOSSDK.DexcarePatient?, practiceId: Swift.String, onCompletion: @escaping DexcareiOSSDK.VisitCompletion, success: @escaping (Swift.String) -> Swift.Void, failure: @escaping (DexcareiOSSDK.VirtualVisitFailedReason) -> Swift.Void)
  func setVirtualEventDelegate(delegate: DexcareiOSSDK.VirtualEventDelegate?)
  func getEstimatedWaitTime(visitId: Swift.String, success: @escaping (DexcareiOSSDK.WaitTime) -> Swift.Void, failure: @escaping (DexcareiOSSDK.WaitTimeFailedReason) -> Swift.Void)
  func getVideoCallStatistics() -> DexcareiOSSDK.VideoCallStatistics?
  func getVirtualVisitStatus(visitId: Swift.String, success: @escaping (DexcareiOSSDK.VisitStatus) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
}
public enum VisitCompletionReason : Swift.String {
  case completed
  case canceled
  case alreadyInConference
  case conferenceFull
  case conferenceInactive
  case conferenceNonExistent
  case micAndCamNotConnected
  case networkIssues
  case exceededReconnectAttempt
  case joinedElsewhere
  case staffDeclined
  case failed
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct RegionAvailability : Swift.Codable {
  public let available: Swift.Bool
  public let reason: DexcareiOSSDK.RegionAvailability.Reason?
  public enum Reason : Swift.String, Swift.Codable {
    case noRegionsFound
    case offHours
    case noOncallProviders
    case regionBusy
    public init(from decoder: Swift.Decoder) throws
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public init(available: Swift.Bool, reason: DexcareiOSSDK.RegionAvailability.Reason?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol ProviderService {
  func getProvider(providerNationalId: Swift.String, success: @escaping (DexcareiOSSDK.Provider) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func getProviderTimeslots(providerNationalId: Swift.String, visitTypeId: Swift.String, startDate: Foundation.Date?, endDate: Foundation.Date?, success: @escaping (DexcareiOSSDK.ProviderTimeSlot) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func getMaxLookaheadDays(visitTypeShortName: DexcareiOSSDK.VisitTypeShortName, ehrSystemName: Swift.String, success: @escaping (Swift.Int) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func scheduleProviderVisit(paymentMethod: DexcareiOSSDK.PaymentMethod, providerVisitInformation: DexcareiOSSDK.ProviderVisitInformation, timeSlot: DexcareiOSSDK.TimeSlot, ehrSystemName: Swift.String, patientDexCarePatient: DexcareiOSSDK.DexcarePatient, actorDexCarePatient: DexcareiOSSDK.DexcarePatient?, success: @escaping (DexcareiOSSDK.ScheduledProviderVisit) -> Swift.Void, failure: @escaping (DexcareiOSSDK.ScheduleProviderAppointmentFailedReason) -> Swift.Void)
}
public struct HumanName : Swift.Codable, Swift.Equatable {
  public var family: Swift.String
  public var given: Swift.String
  public var middle: Swift.String?
  public var prefix: Swift.String?
  public var suffix: Swift.String?
  public var use: Swift.String?
  public init(family: Swift.String, given: Swift.String, middle: Swift.String?, prefix: Swift.String?, suffix: Swift.String?, use: Swift.String?)
  public static func == (a: DexcareiOSSDK.HumanName, b: DexcareiOSSDK.HumanName) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct VirtualPracticeRegion : Swift.Codable, Swift.Equatable {
  public var practiceRegionId: Swift.String
  public var displayName: Swift.String
  public var regionCode: Swift.String
  public var active: Swift.Bool
  public var busy: Swift.Bool
  public var busyMessage: Swift.String
  public var visitPrice: Foundation.Decimal
  public var availability: [DexcareiOSSDK.PracticeRegionAvailability]
  public init(from decoder: Swift.Decoder) throws
  public init(practiceRegionId: Swift.String, displayName: Swift.String, regionCode: Swift.String, active: Swift.Bool, busy: Swift.Bool, busyMessage: Swift.String, visitPrice: Foundation.Decimal, availability: [DexcareiOSSDK.PracticeRegionAvailability])
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DexcareiOSSDK.VirtualPracticeRegion, b: DexcareiOSSDK.VirtualPracticeRegion) -> Swift.Bool
}
public struct PracticeRegionAvailability : Swift.Codable, Swift.Equatable {
  public let start: Foundation.Date
  public let end: Foundation.Date
  public init(start: Foundation.Date, end: Foundation.Date)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DexcareiOSSDK.PracticeRegionAvailability, b: DexcareiOSSDK.PracticeRegionAvailability) -> Swift.Bool
}
public enum CouponCodeFailedReason : Swift.Error, DexcareiOSSDK.FailedReasonType {
  case unauthorized
  case notFound
  case tooManyRequests
  case internalServerError
  case inactive
  case missingInformation(message: Swift.String)
  case failed(reason: DexcareiOSSDK.FailedReason)
  public func failedReason() -> DexcareiOSSDK.FailedReason?
}
public struct VirtualConfig : Swift.Equatable {
  public var showWaitingRoomVideo: Swift.Bool?
  public var waitingRoomVideoURL: Foundation.URL?
  public init(showWaitingRoomVideo: Swift.Bool? = true, waitingRoomVideoURL: Foundation.URL? = nil)
  public static func == (a: DexcareiOSSDK.VirtualConfig, b: DexcareiOSSDK.VirtualConfig) -> Swift.Bool
}
public protocol PatientService {
  func getPatient(success: @escaping (DexcareiOSSDK.DexcarePatient) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func getCatchmentArea(visitState: Swift.String, residenceState: Swift.String, residenceZipCode: Swift.String, brand: Swift.String, success: @escaping (DexcareiOSSDK.CatchmentArea) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func findOrCreatePatient(inEhrSystem: Swift.String, patientDemographics: DexcareiOSSDK.PatientDemographics, success: @escaping (DexcareiOSSDK.DexcarePatient) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func findOrCreateDependentPatient(inEhrSystem: Swift.String, dependentPatientDemographics: DexcareiOSSDK.PatientDemographics, success: @escaping (DexcareiOSSDK.DexcarePatient) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func createPatientWithMyChart(myChartUserName: Swift.String, myChartPassword: Swift.String, ehrSystem: Swift.String, success: @escaping (DexcareiOSSDK.DexcarePatient) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func getSuffixes(success: @escaping (([Swift.String]) -> Swift.Void), failure: @escaping ((DexcareiOSSDK.FailedReason) -> Swift.Void))
}
extension String : Swift.Error {
}
public enum PaymentMethod : Swift.Equatable {
  case `self`
  case couponCode(Swift.String)
  case creditCard(stripeToken: Swift.String)
  case insuranceManualSelf(memberId: Swift.String, providerId: Swift.String)
  case insuranceManualOther(firstName: Swift.String, lastName: Swift.String, gender: DexcareiOSSDK.Gender, dateOfBirth: Foundation.Date, memberId: Swift.String, providerId: Swift.String)
  case insuranceImageSelf(cardId: Swift.String)
  case insuranceImageOther(firstName: Swift.String, lastName: Swift.String, gender: DexcareiOSSDK.Gender, dateOfBirth: Foundation.Date, cardId: Swift.String)
  public static func == (a: DexcareiOSSDK.PaymentMethod, b: DexcareiOSSDK.PaymentMethod) -> Swift.Bool
}
public struct VirtualPractice : Swift.Codable {
  public var practiceId: Swift.String
  public var displayName: Swift.String
  public var careMode: DexcareiOSSDK.PracticeCareMode
  public var payment: DexcareiOSSDK.PracticePaymentAvailability
  public var epicBookingEnabled: Swift.Bool
  public var practiceRegions: [DexcareiOSSDK.VirtualPracticeRegion]
  public init(practiceId: Swift.String, displayName: Swift.String, careMode: DexcareiOSSDK.PracticeCareMode, payment: DexcareiOSSDK.PracticePaymentAvailability, epicBookingEnabled: Swift.Bool, practiceRegions: [DexcareiOSSDK.VirtualPracticeRegion])
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum PracticeCareMode : Swift.String, Swift.Codable {
  case virtual
  case retail
  case chat
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct PracticePaymentAvailability : Swift.Codable {
  public let insurance: Swift.Bool
  public let selfPay: Swift.Bool
  public let serviceKey: Swift.Bool
  public init(insurance: Swift.Bool, selfPay: Swift.Bool, serviceKey: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@frozen public enum PatientDeclaration : Swift.String, Swift.Codable, Swift.Equatable {
  case `self`
  case other
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public struct ClinicTimeSlot : Swift.Equatable, Swift.Codable {
  public let departmentId: Swift.String
  public let startDate: Foundation.Date
  public let endDate: Foundation.Date
  public let timezone: Swift.String
  public let scheduleDays: [DexcareiOSSDK.ScheduleDay]
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.ClinicTimeSlot, b: DexcareiOSSDK.ClinicTimeSlot) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Environment {
  public let fhirOrchUrl: Foundation.URL
  public let virtualVisitConfiguration: DexcareiOSSDK.VirtualVisitConfiguration
  public let dexcareAPIKey: Swift.String
  public init(fhirOrchUrl: Foundation.URL, virtualVisitConfiguration: DexcareiOSSDK.VirtualVisitConfiguration, dexcareAPIKey: Swift.String)
}
public struct VirtualVisitConfiguration {
  public let pushNotificationAppId: Swift.String
  public let pushNotificationPlatform: Swift.String
  public let virtualVisitUrl: Foundation.URL
  public init(pushNotificationAppId: Swift.String, pushNotificationPlatform: Swift.String, virtualVisitUrl: Foundation.URL)
}
public struct DexcareConfiguration {
  public let environment: DexcareiOSSDK.Environment
  public let userAgent: Swift.String
  public let domain: Swift.String
  public let logger: DexcareiOSSDK.DexcareSDKLogger?
  public init(environment: DexcareiOSSDK.Environment, userAgent: Swift.String, domain: Swift.String, logger: DexcareiOSSDK.DexcareSDKLogger? = nil)
}
public class DexcareSDK {
  public var patientService: DexcareiOSSDK.PatientService {
    get
  }
  public var appointmentService: DexcareiOSSDK.AppointmentService {
    get
  }
  public var virtualService: DexcareiOSSDK.VirtualService {
    get
  }
  public var retailService: DexcareiOSSDK.RetailService {
    get
  }
  public var practiceService: DexcareiOSSDK.PracticeService {
    get
  }
  public var providerService: DexcareiOSSDK.ProviderService {
    get
  }
  public var paymentService: DexcareiOSSDK.PaymentService {
    get
  }
  weak public var refreshTokenDelegate: DexcareiOSSDK.RefreshTokenDelegate? {
    get
    set
  }
  public var customizationOptions: DexcareiOSSDK.CustomizationOptions? {
    get
    set
  }
  public init(configuration: DexcareiOSSDK.DexcareConfiguration)
  public func signIn(accessToken: Swift.String)
  public func signOut()
  @objc deinit
}
public typealias TokenRequestCallback = ((Swift.String?) -> (Swift.Void))
public protocol RefreshTokenDelegate : AnyObject {
  func newTokenRequest(tokenCallback: @escaping DexcareiOSSDK.TokenRequestCallback)
}
public enum InsuranceCardFailedReason : Swift.Error, DexcareiOSSDK.FailedReasonType {
  case photoUploadFailed
  case failed(reason: DexcareiOSSDK.FailedReason)
  public func failedReason() -> DexcareiOSSDK.FailedReason?
}
public enum WaitTimeFailedReason : Swift.Error, DexcareiOSSDK.FailedReasonType, Swift.Equatable {
  case regionNotFound
  case noOnCallProviders
  case regionUnavailable
  case internalServerError
  case missingInformation(message: Swift.String)
  case failed(reason: DexcareiOSSDK.FailedReason)
  public func failedReason() -> DexcareiOSSDK.FailedReason?
  public static func == (lhs: DexcareiOSSDK.WaitTimeFailedReason, rhs: DexcareiOSSDK.WaitTimeFailedReason) -> Swift.Bool
}
public protocol VirtualEventDelegate : AnyObject {
  func onWaitingRoomLaunched()
  func onWaitingRoomDisconnected()
  func onWaitingRoomReconnecting()
  func onWaitingRoomReconnected()
  func onVirtualVisitDisconnected()
  func onVirtualVisitReconnecting()
  func onVirtualVisitReconnected()
  func onVirtualVisitStarted()
  func onVirtualVisitCompleted(reason: DexcareiOSSDK.VisitCompletionReason)
  func onVirtualVisitCancelledByUser()
  func onVirtualVisitDeclinedByProvider()
  func onVirtualVisitError(error: DexcareiOSSDK.VirtualVisitEventError)
  func onDevicePairInitiated()
}
public enum VirtualVisitEventError : Swift.Error, Swift.Equatable {
  public static func == (lhs: DexcareiOSSDK.VirtualVisitEventError, rhs: DexcareiOSSDK.VirtualVisitEventError) -> Swift.Bool
  case waitingRoomOpenTokError(Swift.Error)
  case virtualVisitOpenTokError(Swift.Error)
  case devicePairError(DexcareiOSSDK.DevicePairError)
}
public enum DevicePairError : Swift.Error, Swift.Equatable {
  public static func == (lhs: DexcareiOSSDK.DevicePairError, rhs: DexcareiOSSDK.DevicePairError) -> Swift.Bool
  case tytoCarePairFailed(DexcareiOSSDK.TytoCareFailedReason)
}
@_hasMissingDesignatedInitializers public class EmailValidator {
  public static let EMAIL_VALIDATION_REGEX: Swift.String
  public static func isValid(email: Swift.String) -> Swift.Bool
  @objc deinit
}
extension String {
  public func isValidEmail() -> Swift.Bool
}
public struct Clinic : Swift.Equatable, Swift.Codable {
  public let brandName: Swift.String
  public let displayName: Swift.String
  public let address: DexcareiOSSDK.Address
  public let phone: Swift.String
  public let smallImageUrl: Foundation.URL
  public let longitude: Swift.Double
  public let latitude: Swift.Double
  public let ehrSystemName: Swift.String
  public let departmentName: Swift.String
  public let timezone: Swift.String
  public let departmentId: Swift.String
  public let clinicType: Swift.String
  public let isActive: Swift.Bool
  public let instanceId: Swift.String
  public let allowedVisitTypes: [DexcareiOSSDK.AllowedVisitType]
  public let openDays: [DexcareiOSSDK.OpenDay]
  public init(brandName: Swift.String, displayName: Swift.String, address: DexcareiOSSDK.Address, phone: Swift.String, smallImageUrl: Foundation.URL, longitude: Swift.Double, latitude: Swift.Double, ehrSystemName: Swift.String, departmentName: Swift.String, timezone: Swift.String, departmentId: Swift.String, clinicType: Swift.String, isActive: Swift.Bool, instanceId: Swift.String, allowedVisitTypes: [DexcareiOSSDK.AllowedVisitType], openDays: [DexcareiOSSDK.OpenDay])
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.Clinic, b: DexcareiOSSDK.Clinic) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public struct VisitTypeShortName : Swift.RawRepresentable, Swift.Codable, Swift.Equatable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String
  public static let illness: DexcareiOSSDK.VisitTypeShortName
  public static let wellness: DexcareiOSSDK.VisitTypeShortName
  public static let virtual: DexcareiOSSDK.VisitTypeShortName
  public static let followUp: DexcareiOSSDK.VisitTypeShortName
  public static let newPatient: DexcareiOSSDK.VisitTypeShortName
  public static let wellChild: DexcareiOSSDK.VisitTypeShortName
  public static let adultPhysical: DexcareiOSSDK.VisitTypeShortName
  public static let childPhysical: DexcareiOSSDK.VisitTypeShortName
  public static let newSymptoms: DexcareiOSSDK.VisitTypeShortName
  public init(rawValue: DexcareiOSSDK.VisitTypeShortName.RawValue)
}
public struct AllowedVisitType : Swift.Equatable, Swift.Codable {
  public let visitTypeId: Swift.String
  public let name: Swift.String
  public let shortName: DexcareiOSSDK.VisitTypeShortName
  public init(visitTypeId: Swift.String, name: Swift.String, shortName: DexcareiOSSDK.VisitTypeShortName)
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.AllowedVisitType, b: DexcareiOSSDK.AllowedVisitType) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public struct OpenDay : Swift.Equatable, Swift.Codable {
  public let day: Swift.String
  public let openHours: DexcareiOSSDK.OpenHours
  public init(day: Swift.String, openHours: DexcareiOSSDK.OpenHours)
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.OpenDay, b: DexcareiOSSDK.OpenDay) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public struct OpenHours : Swift.Equatable, Swift.Codable {
  public let startTimeString: Swift.String
  public let endTimeString: Swift.String
  public init(startTimeString: Swift.String, endTimeString: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.OpenHours, b: DexcareiOSSDK.OpenHours) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public enum ScheduleProviderAppointmentFailedReason : Swift.Error, DexcareiOSSDK.FailedReasonType {
  case patientNotLinked
  case patientNotFound
  case patientAccountLocked
  case conflictSlotUnavailable
  case conflictPatientDoubleBooked
  case unknownAppointmentConflict
  case internalServerError
  case missingInformation(message: Swift.String)
  case failed(reason: DexcareiOSSDK.FailedReason)
  public func failedReason() -> DexcareiOSSDK.FailedReason?
}
@frozen public enum DexcareSDKLogLevel : Swift.Int {
  case verbose, debug, info, warning, error
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol DexcareSDKLogger {
  func log(_ message: Swift.String, level: DexcareiOSSDK.DexcareSDKLogLevel, sender: Swift.String)
}
public protocol AppointmentService {
  func getRetailVisits(success: @escaping ([DexcareiOSSDK.ScheduledVisit]) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func getCancelReasons(brandName: Swift.String, success: @escaping ([DexcareiOSSDK.CancelReason]) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func cancelRetailAppointment(visitId: Swift.String, cancelReason: DexcareiOSSDK.CancelReason, success: @escaping () -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
}
public struct DexcarePatient : Swift.Codable, Swift.Equatable {
  public let patientGuid: Swift.String
  public let demographicsLinks: [DexcareiOSSDK.PatientDemographics]
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DexcareiOSSDK.DexcarePatient, b: DexcareiOSSDK.DexcarePatient) -> Swift.Bool
}
public struct PatientQuestion : Swift.Codable, Swift.Equatable {
  public var question: Swift.String
  public var answer: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DexcareiOSSDK.PatientQuestion, b: DexcareiOSSDK.PatientQuestion) -> Swift.Bool
}
@frozen public enum Gender : Swift.String {
  case male
  case female
  case other
  case unknown
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension Gender {
  public var demographicStringValue: Swift.String {
    get
  }
  public static func fromDemographicsString(_ text: Swift.String?) -> DexcareiOSSDK.Gender?
}
extension Gender : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
}
public struct TimeSlot : Swift.Equatable, Swift.Codable {
  public let slotId: Swift.String
  public let providerNationalId: Swift.String
  public let providerId: Swift.String
  public let departmentId: Swift.String
  public let departmentIdentifier: Swift.String
  public let slotType: Swift.String
  public let visitTypeId: Swift.String
  public let durationInMin: Swift.Int
  public let slotDateTime: Foundation.Date
  public init(slotId: Swift.String, providerNationalId: Swift.String, providerId: Swift.String, departmentId: Swift.String, departmentIdentifier: Swift.String, slotType: Swift.String, visitTypeId: Swift.String, durationInMin: Swift.Int, slotDateTime: Foundation.Date)
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.TimeSlot, b: DexcareiOSSDK.TimeSlot) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class ZipCodeValidator {
  public static let ZIP_CODE_VALIDATION_REGEX: Swift.String
  public static func isValid(zipCode: Swift.String) -> Swift.Bool
  @objc deinit
}
extension String {
  public func isValidZipCode() -> Swift.Bool
}
public struct InsurancePayer : Swift.Equatable, Swift.Codable {
  public let name: Swift.String
  public let payerId: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.InsurancePayer, b: DexcareiOSSDK.InsurancePayer) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public enum TytoCareFailedReason : Swift.Error {
  case permissionDenied(type: DexcareiOSSDK.TytoCareFailedReason.TytoCarePermissionType)
  case underAge
  case failed(error: Swift.Error)
  public struct TytoCarePermissionType : Swift.OptionSet {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let location: DexcareiOSSDK.TytoCareFailedReason.TytoCarePermissionType
    public static let wifi: DexcareiOSSDK.TytoCareFailedReason.TytoCarePermissionType
    public typealias Element = DexcareiOSSDK.TytoCareFailedReason.TytoCarePermissionType
    public typealias ArrayLiteralElement = DexcareiOSSDK.TytoCareFailedReason.TytoCarePermissionType
    public typealias RawValue = Swift.UInt8
  }
}
public struct ScheduledVisit : Swift.Equatable, Swift.Codable {
  public let id: Swift.String
  public let type: DexcareiOSSDK.ScheduledVisitType
  public let status: DexcareiOSSDK.ScheduledVisitStatus
  public let address: DexcareiOSSDK.Address
  public let appointmentDetails: DexcareiOSSDK.ScheduledVisit.AppointmentDetails
  public let departmentId: Swift.String
  public let ehrSystemName: Swift.String
  public let isNewPatient: Swift.Bool
  public let isReadyForVisit: Swift.Bool
  public let patientEmail: Swift.String?
  public let patientGuid: Swift.String
  public let patientPhone: Swift.String?
  public let timestamps: DexcareiOSSDK.ScheduledVisit.Timestamps
  public var clinic: DexcareiOSSDK.Clinic?
  public init(id: Swift.String, type: DexcareiOSSDK.ScheduledVisitType, status: DexcareiOSSDK.ScheduledVisitStatus, address: DexcareiOSSDK.Address, appointmentDetails: DexcareiOSSDK.ScheduledVisit.AppointmentDetails, departmentId: Swift.String, ehrSystemName: Swift.String, isNewPatient: Swift.Bool, isReadyForVisit: Swift.Bool, patientEmail: Swift.String?, patientGuid: Swift.String, patientPhone: Swift.String?, timestamps: DexcareiOSSDK.ScheduledVisit.Timestamps, clinic: DexcareiOSSDK.Clinic?)
  public struct AppointmentDetails : Swift.Equatable, Swift.Codable {
    public let appointmentId: Swift.String
    public let slotId: Swift.String
    public let startDateTime: Foundation.Date
    public let endDateTime: Foundation.Date
    public let timezone: Swift.String
    public init(appointmentId: Swift.String, slotId: Swift.String, startDateTime: Foundation.Date, endDateTime: Foundation.Date, timezone: Swift.String)
    public init(from decoder: Swift.Decoder) throws
    public static func == (a: DexcareiOSSDK.ScheduledVisit.AppointmentDetails, b: DexcareiOSSDK.ScheduledVisit.AppointmentDetails) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Timestamps : Swift.Equatable, Swift.Codable {
    public let cancelled: Foundation.Date?
    public let done: Foundation.Date?
    public let requested: Foundation.Date?
    public let staffDeclined: Foundation.Date?
    public init(cancelled: Foundation.Date?, done: Foundation.Date?, requested: Foundation.Date?, staffDeclined: Foundation.Date?)
    public init(from decoder: Swift.Decoder) throws
    public static func == (a: DexcareiOSSDK.ScheduledVisit.Timestamps, b: DexcareiOSSDK.ScheduledVisit.Timestamps) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.ScheduledVisit, b: DexcareiOSSDK.ScheduledVisit) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public enum ScheduledVisitType : Swift.String, Swift.Codable, Swift.Equatable {
  case home
  case retail
  case virtual
  case unknown
  public init(from decoder: Swift.Decoder) throws
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum ScheduledVisitStatus : Swift.String, Swift.Codable, Swift.Equatable {
  case requested
  case waitingroom
  case inVisit
  case staffDeclined
  case verification
  case cancelled
  case done
  case unknown
  public init(from decoder: Swift.Decoder) throws
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct CancelReason : Swift.Equatable {
  public var displayText: Swift.String
  public var code: Swift.String
  public init(displayText: Swift.String, code: Swift.String)
  public static func == (a: DexcareiOSSDK.CancelReason, b: DexcareiOSSDK.CancelReason) -> Swift.Bool
}
extension CancelReason : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ScheduledProviderVisit : Swift.Codable, Swift.Equatable {
  public let visitId: Swift.String
  public let isVirtual: Swift.Bool
  public let virtualMeetingInfo: DexcareiOSSDK.ScheduledProviderVisit.VirtualMeetingInfo?
  public init(visitId: Swift.String, isVirtual: Swift.Bool, virtualMeetingInfo: DexcareiOSSDK.ScheduledProviderVisit.VirtualMeetingInfo?)
  public struct VirtualMeetingInfo : Swift.Codable, Swift.Equatable {
    public let joinUrl: Foundation.URL?
    public let joinUrlShort: Foundation.URL?
    public let conferenceId: Swift.String?
    public let tollFreeNumber: Swift.String?
    public let password: Swift.String?
    public let vendor: DexcareiOSSDK.ScheduledProviderVisit.VirtualMeetingInfo.VirtualMeetingVendor?
    public init(from decoder: Swift.Decoder) throws
    public init(joinUrl: Foundation.URL?, joinUrlShort: Foundation.URL?, conferenceId: Swift.String?, tollFreeNumber: Swift.String?, password: Swift.String?, vendor: DexcareiOSSDK.ScheduledProviderVisit.VirtualMeetingInfo.VirtualMeetingVendor?)
    public enum VirtualMeetingVendor : Swift.String, Swift.Codable, Swift.Equatable {
      case teams
      case zoom
      case none
      public init(from decoder: Swift.Decoder) throws
      public typealias RawValue = Swift.String
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public static func == (a: DexcareiOSSDK.ScheduledProviderVisit.VirtualMeetingInfo, b: DexcareiOSSDK.ScheduledProviderVisit.VirtualMeetingInfo) -> Swift.Bool
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: DexcareiOSSDK.ScheduledProviderVisit, b: DexcareiOSSDK.ScheduledProviderVisit) -> Swift.Bool
}
extension Data {
  public var tokenHexStringValue: Swift.String {
    get
  }
}
public protocol PracticeService {
  func getVirtualPractice(practiceId: Swift.String, success: @escaping (DexcareiOSSDK.VirtualPractice) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func getVirtualPracticeRegionAvailability(practiceRegionId: Swift.String, success: @escaping (DexcareiOSSDK.RegionAvailability) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func getEstimatedWaitTime(practiceRegionId: Swift.String, success: @escaping (DexcareiOSSDK.WaitTime) -> Swift.Void, failure: @escaping (DexcareiOSSDK.WaitTimeFailedReason) -> Swift.Void)
}
public struct Identifier : Swift.Equatable, Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.Identifier, b: DexcareiOSSDK.Identifier) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CatchmentArea : Swift.Equatable, Swift.Codable {
  public let ehrSystem: Swift.String
  public let departmentId: Swift.String
  public init(ehrSystem: Swift.String, departmentId: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.CatchmentArea, b: DexcareiOSSDK.CatchmentArea) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol PaymentService {
  func getInsurancePayers(tenant: Swift.String, success: @escaping ([DexcareiOSSDK.InsurancePayer]) -> Swift.Void, failure: @escaping (DexcareiOSSDK.FailedReason) -> Swift.Void)
  func verifyCouponCode(couponCode: Swift.String, success: @escaping (Foundation.Decimal) -> Swift.Void, failure: @escaping (DexcareiOSSDK.CouponCodeFailedReason) -> Swift.Void)
  func uploadInsuranceCard(frontImage: UIKit.UIImage, backImage: UIKit.UIImage, success: @escaping (Swift.String) -> Swift.Void, failure: @escaping (DexcareiOSSDK.InsuranceCardFailedReason) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class PhoneValidator {
  public static let PHONE_VALIDATION_REGEX: Swift.String
  public static func isValid(phoneNumber: Swift.String) -> Swift.Bool
  @objc deinit
}
extension String {
  public func isValidPhoneNumber() -> Swift.Bool
}
public struct ProviderTimeSlot : Swift.Equatable, Swift.Codable {
  public let providerNationalId: Swift.String
  public let startDate: Foundation.Date
  public let endDate: Foundation.Date
  public let timezoneString: Swift.String
  public let scheduleDays: [DexcareiOSSDK.ScheduleDay]
  public var timeZone: Foundation.TimeZone? {
    get
  }
  public init(providerNationalId: Swift.String, startDate: Foundation.Date, endDate: Foundation.Date, timezoneString: Swift.String, scheduleDays: [DexcareiOSSDK.ScheduleDay])
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.ProviderTimeSlot, b: DexcareiOSSDK.ProviderTimeSlot) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ProviderVisitInformation : Swift.Equatable, Swift.Codable {
  public var visitReason: Swift.String
  public var patientDeclaration: DexcareiOSSDK.PatientDeclaration
  public var userEmail: Swift.String
  public var contactPhoneNumber: Swift.String
  public var nationalProviderId: Swift.String
  public var visitTypeId: Swift.String
  public var ehrSystemName: Swift.String
  public let actorRelationshipToPatient: DexcareiOSSDK.RelationshipToPatient?
  public var patientQuestions: [DexcareiOSSDK.PatientQuestion]?
  public init(visitReason: Swift.String, patientDeclaration: DexcareiOSSDK.PatientDeclaration, userEmail: Swift.String, contactPhoneNumber: Swift.String, nationalProviderId: Swift.String, visitTypeId: Swift.String, ehrSystemName: Swift.String, actorRelationshipToPatient: DexcareiOSSDK.RelationshipToPatient?, patientQuestions: [DexcareiOSSDK.PatientQuestion]? = nil)
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.ProviderVisitInformation, b: DexcareiOSSDK.ProviderVisitInformation) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ScheduleDay : Swift.Equatable, Swift.Codable {
  public let date: Foundation.Date
  public let timeSlots: [DexcareiOSSDK.TimeSlot]
  public init(date: Foundation.Date, timeSlots: [DexcareiOSSDK.TimeSlot])
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DexcareiOSSDK.ScheduleDay, b: DexcareiOSSDK.ScheduleDay) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public struct VideoCallStatistics : Swift.Encodable {
  public var subscriberVideoStats: DexcareiOSSDK.SubscriberNetworkStats
  public var subscriberAudioStats: DexcareiOSSDK.SubscriberNetworkStats
  public var publisherVideoStats: [DexcareiOSSDK.PublisherNetworkStats]
  public var publisherAudioStats: [DexcareiOSSDK.PublisherNetworkStats]
  public var publisherRTCStats: [DexcareiOSSDK.PublisherRtcStats]
  public var subscriberRTCStats: Swift.String
  public init()
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PublisherRtcStats : Swift.Encodable {
  public var connectionId: Swift.String
  public var jsonArrayOfReports: Swift.String
  public init()
  public init(connectionId: Swift.String, jsonArrayOfReports: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SubscriberNetworkStats : Swift.Encodable {
  public var packetsReceived: Swift.UInt64
  public var packetsLost: Swift.UInt64
  public var bytesReceived: Swift.UInt64
  public var bandwidthBitsPerSecond: Swift.UInt64
  public var packetLossRatio: Swift.Double
  public var lastUpdated: Foundation.Date {
    get
  }
  public init()
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PublisherNetworkStats : Swift.Encodable {
  public var subscriberId: Swift.String
  public var connectionId: Swift.String
  public var packetsSent: Swift.Int64
  public var packetsLost: Swift.Int64
  public var bytesSent: Swift.Int64
  public var bandwidthBitsPerSecond: Swift.Int64
  public var packetLossRatio: Swift.Double
  public var lastUpdated: Foundation.Date {
    get
  }
  public var startDateTime: Foundation.Date {
    get
  }
  public init()
  public func encode(to encoder: Swift.Encoder) throws
}
extension DexcareiOSSDK.RelationshipToPatient : Swift.Equatable {}
extension DexcareiOSSDK.RelationshipToPatient : Swift.Hashable {}
extension DexcareiOSSDK.RelationshipToPatient : Swift.RawRepresentable {}
extension DexcareiOSSDK.VisitStatus : Swift.Equatable {}
extension DexcareiOSSDK.VisitStatus : Swift.Hashable {}
extension DexcareiOSSDK.VisitStatus : Swift.RawRepresentable {}
extension DexcareiOSSDK.PaymentHolderDeclaration : Swift.Equatable {}
extension DexcareiOSSDK.PaymentHolderDeclaration : Swift.Hashable {}
extension DexcareiOSSDK.PaymentHolderDeclaration : Swift.RawRepresentable {}
extension DexcareiOSSDK.VisitCompletionReason : Swift.Equatable {}
extension DexcareiOSSDK.VisitCompletionReason : Swift.Hashable {}
extension DexcareiOSSDK.VisitCompletionReason : Swift.RawRepresentable {}
extension DexcareiOSSDK.RegionAvailability.Reason : Swift.Equatable {}
extension DexcareiOSSDK.RegionAvailability.Reason : Swift.Hashable {}
extension DexcareiOSSDK.RegionAvailability.Reason : Swift.RawRepresentable {}
extension DexcareiOSSDK.PracticeCareMode : Swift.Equatable {}
extension DexcareiOSSDK.PracticeCareMode : Swift.Hashable {}
extension DexcareiOSSDK.PracticeCareMode : Swift.RawRepresentable {}
extension DexcareiOSSDK.PatientDeclaration : Swift.Hashable {}
extension DexcareiOSSDK.PatientDeclaration : Swift.RawRepresentable {}
extension DexcareiOSSDK.DexcareSDKLogLevel : Swift.Equatable {}
extension DexcareiOSSDK.DexcareSDKLogLevel : Swift.Hashable {}
extension DexcareiOSSDK.DexcareSDKLogLevel : Swift.RawRepresentable {}
extension DexcareiOSSDK.Gender : Swift.Equatable {}
extension DexcareiOSSDK.Gender : Swift.Hashable {}
extension DexcareiOSSDK.Gender : Swift.RawRepresentable {}
extension DexcareiOSSDK.ScheduledVisitType : Swift.Hashable {}
extension DexcareiOSSDK.ScheduledVisitType : Swift.RawRepresentable {}
extension DexcareiOSSDK.ScheduledVisitStatus : Swift.Hashable {}
extension DexcareiOSSDK.ScheduledVisitStatus : Swift.RawRepresentable {}
extension DexcareiOSSDK.ScheduledProviderVisit.VirtualMeetingInfo.VirtualMeetingVendor : Swift.Hashable {}
extension DexcareiOSSDK.ScheduledProviderVisit.VirtualMeetingInfo.VirtualMeetingVendor : Swift.RawRepresentable {}
